==============================================================================
Channelot - Terminal and Job IO for Lua Coroutines                   *channelot*

Channelot is a library plugin for operating Neovim jobs from a Lua
coroutine. It supports:

 * Starting jobs, with and without terminals.
 * Starting multiple jobs on the same Neovim terminal.
 * Job control is done via Lua coroutines - Channelot will resume the
   coroutine once the job is finished and/or when it outputs new data.

Channelot was created as a supplemental plugin for Moonicipal
(https://github.com/idanarye/nvim-moonicipal), but can be used independent
of it.

A terminal is created in the current buffer, so it is advisable to create
a new buffer in a new split first. Unlike regular Neovim terminals that
prompt for exit automatically when the process is finished,
ChannelotTerminal can run multiple jobs so it needs to prompt the user
manually to be closed:
>
    vim.cmd.new()
    local t = channelot.terminal()
    t:job('./command arg1 arg2'):wait()
    t:prompt_exit()
<
A terminal with a job can also be created directly - in which case the user
will be prompted automatically to close it, by Neovim itself:
>
    vim.cmd.new()
    local j = channelot.terminal_job('./command arg1 arg2')
    j:wait()
<
Jobs without a terminal can also be created:
>
    --No need to create a new window because we don't convert the current
    --buffer to a terminal.
    channelot.job('./command arg1 arg2')
<
Note that the job can be given as either as single string (with shell
expansion) or as a list of strings (with no shell expansion):
>
    --Equivalent:
    channelot.job[[./command a b\ c]]
    channelot.job{'./command', 'a', 'b c'}
<
Also, environment variables can be given as a table before the command:
>
    --Equivalent (on POSIX shells):
    channelot.job({
        FOO='bar',
        BAZ='qux',
    }, {'./command', 'arg'})
    channelot.job'FOO=bar BAZ=qux ./command arg'
<
All these methods create a |ChannelotJob| object, which can be used to
control the job from within a Lua coroutine. |ChannelotJob:wait()| can be
used to wait for the job to finish, and get its exit status:
>
    local exit_status = channelot.job'sleep 5':wait()
<
|ChannelotJob:iter()| can be used to get the stdout and stderr of a job:
>
    for _, line in channelot.job'ls':iter() do
        print('Has file', line)
    end
<
Note that jobs with PTY behave differently than jobs without PTY regarding
their output.

|ChannelotJob:write()| and |ChannelotJob:writeln()| can be used to write to
a running job:
>
    local job = channelot.job'bc'
    job:writeln('1 + 2')
    job:close_stdin()
    for _, line in job:iter() do
        print('1 + 2 =', line)
        break
    end
<

ChannelotCreateWindowForTerminalOpts      *ChannelotCreateWindowForTerminalOpts*

    Fields: ~
        {bufnr?}  (number)  Use an existing buffer instead of creating a new one


M.create_window_for_terminal({opts?})     *channelot.create_window_for_terminal*
    Create a new window suitable for running terminal jobs.

    * When the terminal window is closed, the focus will return (if possible) to
      the original window from which this function was invoked.
    * Automatically goes into insert mode inside the new window.
    * Does not actually start the terminal.


    Parameters: ~
        {opts?}  (ChannelotCreateWindowForTerminalOpts)


ChannelotTerminalOpts                                    *ChannelotTerminalOpts*

    Fields: ~
        {bufnr?}  (number)  Use the specified buffer instead of the current buffer


M.terminal({opts?})                                         *channelot.terminal*
    Convert the current buffer to a |ChannelotTerminal|.

    Parameters: ~
        {opts?}  (ChannelotTerminalOpts)

    Returns: ~
        (ChannelotTerminal)


M.windowed_terminal({opts?})                       *channelot.windowed_terminal*
    Similar to |channelot.terminal|, but automatically creates a window with
    |channelot.create_window_for_terminal| to put the new terminal in.

    Parameters: ~
        {opts?}  (ChannelotTerminalOpts)

    Returns: ~
        (ChannelotTerminal)


M.shadow_terminal()                                  *channelot.shadow_terminal*
    Similar to |channelot.terminal|, but without creating a window.

    A window can be created later using |ChannelotTerminal:expose|.

    Returns: ~
        (ChannelotTerminal)


                                                        *channelot.terminal_job*
M.terminal_job({env}, {command}, {opts?})
    Start a job on the current buffer, converting it to a terminal

    Parameters: ~
        {env}      (table<string,any>)    Environment variables for the command
        {command}  (string|string[])      The command as a string or as a list of arguments
        {opts?}    (ChannelotJobOptions)

    Returns: ~
        (ChannelotJob)  @overload fun(command: string|string[]): ChannelotJob
                        @overload fun(command: string|string[], opts: ChannelotJobOptions): ChannelotJob


                                               *channelot.windowed_terminal_job*
M.windowed_terminal_job({env}, {command}, {opts?})
    Similar to |channelot.terminal_job|, but automatically creates a window with
    |channelot.create_window_for_terminal| to run the terminal job in.

    Parameters: ~
        {env}      (table<string,any>)    Environment variables for the command
        {command}  (string|string[])      The command as a string or as a list of arguments
        {opts?}    (ChannelotJobOptions)

    Returns: ~
        (ChannelotJob)  @overload fun(command: string|string[]): ChannelotJob
                        @overload fun(command: string|string[], opts: ChannelotJobOptions): ChannelotJob


M.job({env}, {command}, {opts?})                                 *channelot.job*
    Start a job without a terminal attached to it.

    Note: this job will not have a PTY, unless `{ pty = true }` is passed in the `opts`.

    Parameters: ~
        {env}      (table<string,any>)    Environment variables for the command
        {command}  (string|string[])      The command as a string or as a list of arguments
        {opts?}    (ChannelotJobOptions)

    Returns: ~
        (ChannelotJob)  @overload fun(command: string|string[]): ChannelotJob
                        @overload fun(command: string|string[], opts: ChannelotJobOptions): ChannelotJob


ChannelotTerminal                                            *ChannelotTerminal*

    Fields: ~
        {terminal_id}  (integer)


                                                         *ChannelotTerminal:job*
ChannelotTerminal:job({env}, {command}, {opts?})
    Start a job on a |ChannelotTerminal|.

    Parameters: ~
        {env}      (table<string,any>)    Environment variables for the command
        {command}  (string|string[])      The command as a string or as a list of arguments
        {opts?}    (ChannelotJobOptions)

    Returns: ~
        (ChannelotJob)  @overload fun(command: string|string[]): ChannelotJob
                        @overload fun(command: string|string[], opts: ChannelotJobOptions): ChannelotJob


ChannelotTerminal:raw_write({text})                *ChannelotTerminal:raw_write*
    Write text as is directly to the terminal (NOT! the job - the terminal)

    Note that multiline text will come up weird if `\n` is used alone without
    `\r`. This is a property of Neovim's terminal, not of Channelot. To fix
    that, use |ChannelotTerminal:write| or |ChannelotTerminal:writeln|.

    Parameters: ~
        {text}  (string)


ChannelotTerminal:write({text})                        *ChannelotTerminal:write*
    Write text directly to the terminal (NOT! the job - the terminal)

    This will also fix the linefeed in multipline text.

    Parameters: ~
        {text}  (string)


ChannelotTerminal:writeln({text})                    *ChannelotTerminal:writeln*
    Write text directly to the terminal (NOT! the job - the terminal), and add CRLF.

    This will also fix the linefeed in multipline text.

    Parameters: ~
        {text}  (string)


ChannelotTerminal:read_key()                        *ChannelotTerminal:read_key*
    Read a single key press from the terminal.

    Returns: ~
        (string)   the pressed keycode


ChannelotTerminal:get_bufnr()                      *ChannelotTerminal:get_bufnr*

    Returns: ~
        (number)   The buffer number used by the terminal.


ChannelotTerminal:list_windows()                *ChannelotTerminal:list_windows*

    Returns: ~
        (number[])   A list of window handles that contain the terminal


ChannelotTerminal:expose()                            *ChannelotTerminal:expose*
    Create a window for the terminal using |channelot.create_window_for_terminal|.

    This is useful for a |channelot.shadow_terminal| that later needs to be
    displayed - for example, if an error was encountered.


ChannelotTerminal:close_buffer()                *ChannelotTerminal:close_buffer*
    Close (delete) the buffer used by the terminal.


ChannelotTerminal:prompt_exit({prompt?})         *ChannelotTerminal:prompt_exit*
    Prompt the user to press a key and close the terminal.

    When using a job on a |channelot.terminal|, the terminal will not close
    automatically after the job - because it can be used to run more jobs. Use
    this method to prompt the user to close it.

    Parameters: ~
        {prompt?}  (string)

    Returns: ~
        (string)   the key the user pressed to close the terminal


                                 *ChannelotTerminal:prompt_after_process_exited*
ChannelotTerminal:prompt_after_process_exited({exit_status})
    Helper wrapper around |ChannelotTerminal:prompt_exit| to respond for job failure.

    Parameters: ~
        {exit_status}  (number)  The exit status of the failed job.


ChannelotTerminal:with({block})                         *ChannelotTerminal:with*
    Run a code block (function) with the terminal, and then prompt the user to close it.

    If the block raises, as an error, a table with an `exit_status` fields (such
    as the one job:check()` raises) the exception will be swallowed and the exit
    status will be shown in the terminal's exit prompt.

    If the terminal is now shows in any open window when the block finishes or
    terminates, it'll be closed silently (though the error will still
    propagate) - unless there was an `exit_status` error, in which case the
    terminal will be exposed and the user will be prompted to press a key to
    close it.

    Parameters: ~
        {block}  (fun(terminal:ChannelotTerminal))

    Returns: ~
        (number|nil)   The exit status of the failed job, or nil if no job failed


ChannelotJobOptions                                        *ChannelotJobOptions*

    Fields: ~
        {pty?}  (boolean)  Enforce a PTY or a non-PTY. Leave nil to use default. If false, keyboard input is disabled for the job.
        {cwd?}  (string)   Run the job under a different directory.


ChannelotJob                                                      *ChannelotJob*
    An handle to a Neovim job with functions for controlling it from a Lua coroutine.

    Fields: ~
        {env}           (table<string,any>)
        {command}       (string|string[])
        {pty}           (boolean)
        {job_id}        (integer)
        {exit_status?}  (integer)


ChannelotJob:wait()                                          *ChannelotJob:wait*
    Wait for the job to finish. Must be called from a Lua coroutine.

    Returns: ~
        (integer)   the job's exit status


ChannelotJob:check({expected_status?})                      *ChannelotJob:check*

    If no `expected_status` is given, it defaults to 0. If a list-like table is
    given, this method will check that the exit status is one of the numbers in
    that table.

    Parameters: ~
        {expected_status?}  (integer|integer[])


ChannelotJobIterConfig                                  *ChannelotJobIterConfig*

    Fields: ~
        {stdout?}  ("buffered"|"unbuffered"|"ignore")
        {stderr?}  ("buffered"|"unbuffered"|"ignore")


ChannelotJob:iter({opts?})                                   *ChannelotJob:iter*
    Iterate over output from the job. Must be called from a Lua coroutine.

    Multiyields each time the type of line (stdout/stderr) and the line data.

    Parameters: ~
        {opts?}  (ChannelotJobIterConfig)


ChannelotJob:write({text})                                  *ChannelotJob:write*
    Write text to a running job's stdin.

    Parameters: ~
        {text}  (string)


ChannelotJob:writeln({text?})                             *ChannelotJob:writeln*
    Write text to a running job's stdin, and add a newline.

    Parameters: ~
        {text?}  (string)  leave empty to write only the newline


ChannelotJob:close_stdin()                            *ChannelotJob:close_stdin*
    Close the job's standard input.


ChannelotJob:using({dlg})                                   *ChannelotJob:using*
    Invoke the delegate on the job.

    This can be used with third party plugins that add capabilities to Channelot
    jobs, or that want to utilize them.

    Parameters: ~
        {dlg}  (fun(job:ChannelotJob))

    Returns: ~
        (ChannelotJob)   The job itself


vim:tw=78:ts=8:noet:ft=help:norl:
